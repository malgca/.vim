set nocompatible
source $home/abbreviations.vim
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
behave mswin

" function definitions
function ShortTabLabel()
	let bufnrlist = tabpagebuflist(v:lnum)

	" show only the first six letters of the name + ..
	let label = bufname(bufnrlist[tabpagewinnr(v:lnum) - 1])
	let filename = fnamemodify(label, ':t')

	" only add .. if string is more than 8 characters long.
	if strlen(filename) >=8
		let ret=filename[0:5].'..'
	else
		let ret=filename
	endif

	return ret
endfunction

function! InfoGuiTooltip()
	" get window count
	let wincount = tabpagewinnr(tabpagenr(), '$')
	let bufferlist=''

	" get name of active buffers in windows
	for i in tabpagebuflist()
		let bufferlist .= '['.fnamemodify(bufname(i), ':t').'] '
	endfor

		return bufname($).' windows: '.wincount.' '.bufferlist.' '
endfunction

function FoldSpellBalloon()
	let foldstart = foldclosed(v:beval_lnum)
	let foldEnd = foldclosedend(v:beval_lnum)
	let lines = []

	" detect if we are in a fold.
	if foldstart < 0
		" detect if we are on a misspelled word
		let lines = spellsuggest(spellbadword(v:beval_text)[0], 5, 0)
	else
		" we are in a fold
		let numLines = foldEnd - foldstart + 1

		" if we have too many lines in fold, show only the first 14 and the last 14 lines
		if(numLines > 31)
			let lines = getline(foldstart, foldstart + 14)
			let lines += ['-- Snipped ' . (numLines - 30) . ' lines --']
			let lines += getline(foldEnd - 14, foldEnd)
		else
			" less than 30 lines, lets show all of them
			let lines = getline(foldstart, foldEnd)
		endif
	endif

	" return result
	return join(lines, has("balloon_multiline") ? "\n" : " ")
endfunction

" set functions
set guitablabel=%{ShortTabLabel()}
set guitabtooltip=%!InfoGuiTooltip()

set balloonexpr=FoldSpellBalloon()
set ballooneval

set shell=powershell
set shellcmdflag=-command

set statusline=%F%<\ %=[TYPE=%Y]\ %=[%p%%]
set laststatus=2

set guifont=Consolas:h14

set number
set numberwidth=3

set cursorline

" key mappings:
" maximize text area (ctrl-f2)
map <silent> <C-F2> :if &guioptions =~# 'T' <Bar>
			\set guioptions-=T <Bar>
			\set guioptions-=m <bar>
		\else <Bar>
			\set guioptions+=T <Bar>
			\set guioptions+=m <Bar>
		\endif<CR>

" open new tab (ctrl-n)
imap <silent> <C-n> <ESC>:tabnew<cr>a
" close current tab (ctrl-w)
imap <silent> <C-w> <ESC>:tabclose<cr>a
" save current file (ctrl-s)
imap <silent> <C-s> <ESC>:w<cr>a

" easier navigation with word wrap on.
map <DOWN> gj
map <UP> gk
imap <UP> <ESC>gki
imap <DOWN> <ESC>gji

